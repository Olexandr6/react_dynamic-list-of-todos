{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","searchQuery","todoStatus","onSearchChange","onSelectUser","onRandomize","className","action","htmlFor","name","type","placeholder","value","onChange","id","disabled","onClick","map","userId","title","completed","classNames","checked","readOnly","BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","getTodos","getUserById","user","CurrentUser","state","isLoadUserError","this","loadUserData","prevProps","props","setState","email","phone","clearUserInfo","role","React","Component","App","selectedUserId","handleChange","event","target","filterTodos","filtredTodos","filter","toLowerCase","includes","selectUser","clearSelectedUser","randomizeTodosOrder","suffeledTodos","i","length","j","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfbeb746.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[],\n  searchQuery: string,\n  todoStatus: string,\n  onSearchChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void\n  onSelectUser: (userId: number) => void,\n  onRandomize: () => void\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  searchQuery,\n  todoStatus,\n  onSearchChange,\n  onSelectUser,\n  onRandomize,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <form className=\"form\" action=\"GET\">\n        <h2 className=\"form__title\">Filter todos</h2>\n        <div className=\"mb-4\">\n          <label className=\"form__label\" htmlFor=\"title\">\n            Search todo\n            <br />\n            <input\n              className=\"form-control mt-1\"\n              name=\"searchQuery\"\n              type=\"text\"\n              placeholder=\"Type search word\"\n              value={searchQuery}\n              onChange={onSearchChange}\n            />\n          </label>\n        </div>\n\n        <div>\n          <select\n            className=\"form-select mb-5\"\n            name=\"todoStatus\"\n            id=\"todoStatus\"\n            value={todoStatus}\n            onChange={onSearchChange}\n          >\n            <option value=\"\" disabled>\n              Choose a todo status\n            </option>\n\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n\n            <option value=\"not completed\">\n              Not completed\n            </option>\n          </select>\n        </div>\n      </form>\n\n      <h2>Todos:</h2>\n\n      <div className=\"btn-container\">\n        <button\n          className=\"btn btn-outline-primary TodoList__randomize-btn\"\n          type=\"button\"\n          onClick={onRandomize}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(({\n            id,\n            userId,\n            title,\n            completed,\n          }) => {\n            return (\n              <li\n                key={id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': completed },\n                  { 'TodoList__item--unchecked': !completed },\n                )}\n              >\n                <label htmlFor=\"todo\">\n                  <input\n                    name=\"todo\"\n                    type=\"checkbox\"\n                    checked={completed}\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => onSelectUser(userId)}\n                >\n                  {`User#${userId}`}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(url: string) {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getTodos() {\n  const todos: Todo[] = await request(`${BASE_URL}/todos`);\n\n  return todos;\n}\n\nexport async function getUserById(userId: number) {\n  const user: User = await request(`${BASE_URL}/users/${userId}`);\n\n  return user;\n}\n","import React from 'react';\nimport { getUserById } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  clearUserInfo: () => void,\n}\n\ninterface State {\n  user: User | null,\n  isLoadUserError: boolean,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isLoadUserError: false,\n  };\n\n  componentDidMount() {\n    this.loadUserData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserData();\n    }\n  }\n\n  async loadUserData() {\n    try {\n      this.setState({ isLoadUserError: false });\n      const user = await getUserById(this.props.userId);\n\n      this.setState({ user });\n    } catch (error) {\n      this.setState({ user: null, isLoadUserError: true });\n    }\n  }\n\n  render() {\n    const { user, isLoadUserError } = this.state;\n\n    return (\n      <div>\n        {user && (\n          <div className=\"CurrentUser\">\n\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear\"\n              onClick={this.props.clearUserInfo}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n\n        {isLoadUserError && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            An error occured when loading user info!\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n  searchQuery: string,\n  todoStatus: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    searchQuery: '',\n    todoStatus: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  filterTodos = () => {\n    const { todos, searchQuery, todoStatus } = this.state;\n\n    let filtredTodos = todos;\n\n    if (searchQuery) {\n      filtredTodos = filtredTodos.filter(({ title }) => title\n        .toLowerCase()\n        .includes(searchQuery.toLowerCase()));\n    }\n\n    if (todoStatus) {\n      filtredTodos = filtredTodos.filter(({ completed }) => {\n        if (todoStatus === 'completed') {\n          return completed;\n        }\n\n        if (todoStatus === 'not completed') {\n          return !completed;\n        }\n\n        return true;\n      });\n    }\n\n    return filtredTodos;\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  randomizeTodosOrder = () => {\n    const { todos } = this.state;\n\n    const suffeledTodos = [...todos];\n\n    for (let i = suffeledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [suffeledTodos[i], suffeledTodos[j]] = [suffeledTodos[j], suffeledTodos[i]];\n    }\n\n    this.setState({ todos: suffeledTodos });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n      searchQuery,\n      todoStatus,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!!todos.length && (\n            <TodoList\n              todos={this.filterTodos()}\n              searchQuery={searchQuery}\n              todoStatus={todoStatus}\n              onSearchChange={this.handleChange}\n              onSelectUser={this.selectUser}\n              onRandomize={this.randomizeTodosOrder}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUserInfo={this.clearSelectedUser}\n              />\n            ) : (\n              <div className=\"alert alert-primary\" role=\"alert\">\n                No user selected\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}